// SPDX-License-Identifier: MPL-2.0
namespace Emik.SourceGenerators.Tattoo;

/// <summary>Creates global imports of every namespace of the current project.</summary>
[Generator]
public sealed class NamespaceGenerator : IIncrementalGenerator
{
    const string
        FileName = "GlobalUsings.g.cs",
        Global = "global::";

    static readonly AssemblyName s_name = typeof(NamespaceGenerator).Assembly.GetName();

    static readonly string s_header =
        $"// <auto-generated/>\n// {s_name.Name}, {s_name.Version.ToShortString()}\n#pragma warning disable\n";

    /// <inheritdoc />
    void IIncrementalGenerator.Initialize(IncrementalGeneratorInitializationContext context)
    {
        var file = context.CompilationProvider.Select(FilePath);
        var generation = context.CompilationProvider.Combine(file);
        context.RegisterSourceOutput(generation, Generate);
    }

    static void Generate(SourceProductionContext context, (Compilation, string?) tuple)
    {
        if (tuple is (var compilation, { } filePath) && Imports(compilation) is var contents)
            context.AddSource(filePath, contents);
    }

    [Pure]
    static bool IsFileNameGeneratedGlobalUsing(scoped in ReadOnlySpan<char> filePath) =>
        (filePath.LastIndexOfAny('/', '\\') is var index and not -1 ? filePath[++index..] : filePath) is not FileName;

    [MustUseReturnValue]
    static string Imports(in Compilation compilation)
    {
        StringBuilder sb = new(s_header);

        compilation
           .References
           .Select(compilation.GetAssemblyOrModuleSymbol)
           .Select(x => (x as IModuleSymbol)?.ContainingAssembly ?? x)
           .OfType<IAssemblySymbol>()
           .Filter()
           .SelectMany(x => x.GetAllMembers())
           .OfType<INamespaceSymbol>()
           .Concat(compilation.GetSymbolsWithName(_ => true, SymbolFilter.Namespace))
           .Select(x => x.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat))
           .Distinct(StringComparer.Ordinal)
           .Omit(string.IsNullOrWhiteSpace)
           .Omit(x => x.Contains('<') || x.Contains('>'))
           .OrderByDescending(x => x.StartsWith($"{Global}{nameof(System)}"))
           .ThenBy(x => x, StringComparer.Ordinal)
           .For(x => sb.Append("global using ").Append(x).Append(";\n"))
           .Peek(_ => sb.Append("\n// Polyfills of namespaces in case dependencies are conditional.\n"))
           .For(x => sb.Append("namespace ").Append(x.StartsWith(Global) ? x[Global.Length..] : x).Append(" { }\n\n"));

        return $"{sb.Remove(^1..)}";
    }

    [MustUseReturnValue]
    static string? FilePath(Compilation compilation, CancellationToken _) =>
        compilation.SyntaxTrees.Any(x => IsFileNameGeneratedGlobalUsing(x.FilePath.AsSpan()))
            ? null
            : compilation.SyntaxTrees
               .SelectMany(x => Path.GetDirectoryName(x.FilePath).FindSmallPathToNull(Path.GetDirectoryName))
               .Distinct(StringComparer.Ordinal)
               .FirstOrDefault(x => Directory.EnumerateFiles(x).Any(x => x.EndsWith(".csproj")));
}
