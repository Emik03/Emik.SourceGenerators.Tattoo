// SPDX-License-Identifier: MPL-2.0
namespace Emik.SourceGenerators.Tattoo;

/// <summary>Creates global imports of every namespace of the current project.</summary>
[Generator]
public sealed class NamespaceGenerator : ISourceGenerator, ISyntaxContextReceiver
{
    const string
        FileName = "GlobalUsings.g.cs",
        Global = "global::";

    static readonly AssemblyName s_name = typeof(NamespaceGenerator).Assembly.GetName();

    static readonly string s_header =
        $"// <auto-generated/>\n// {s_name.Name}, {s_name.Version.ToShortString()}\n#pragma warning disable\n";

    bool _hasFile;

    /// <inheritdoc />
    void ISourceGenerator.Execute(GeneratorExecutionContext context)
    {
        if (!_hasFile &&
            context.Compilation is var compilation &&
            FindProjectDirectory(compilation, out var directory) &&
            Imports(compilation) is var contents &&
            Path.Combine(directory, FileName) is var path)
            File.WriteAllText(path, contents);
    }

    /// <inheritdoc />
    void ISourceGenerator.Initialize(GeneratorInitializationContext context) =>
        context.RegisterForSyntaxNotifications(() => this);

    /// <inheritdoc />
    void ISyntaxContextReceiver.OnVisitSyntaxNode(GeneratorSyntaxContext context)
    {
        if (context.Node.SyntaxTree.FilePath is var path &&
            Path.GetFileName(path) is FileName &&
            context.SemanticModel.Compilation is var compilation &&
            Imports(compilation) is var contents &&
            (_hasFile = true))
            File.WriteAllText(path, contents);
    }

    static bool FindProjectDirectory(Compilation compilation, [NotNullWhen(true)] out string? path) =>
        (path = compilation
           .SyntaxTrees
           .SelectMany(x => Path.GetDirectoryName(x.FilePath).FindSmallPathToNull(Path.GetDirectoryName))
           .Distinct(StringComparer.Ordinal)
           .FirstOrDefault(x => Directory.EnumerateFiles(x).Any(x => x.EndsWith(".csproj")))) is not null;

    [MustUseReturnValue]
    static string Imports(Compilation compilation)
    {
        StringBuilder sb = new(s_header);

        compilation
           .References
           .Select(compilation.GetAssemblyOrModuleSymbol)
           .Select(x => (x as IModuleSymbol)?.ContainingAssembly ?? x)
           .OfType<IAssemblySymbol>()
           .Filter()
           .SelectMany(x => x.GetAllMembers())
           .OfType<INamespaceSymbol>()
           .Concat(compilation.GetSymbolsWithName(_ => true, SymbolFilter.Namespace))
           .Select(x => x.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat))
           .Distinct(StringComparer.Ordinal)
           .Omit(string.IsNullOrWhiteSpace)
           .Omit(x => x.Contains('<') || x.Contains('>'))
           .OrderByDescending(x => x.StartsWith($"{Global}{nameof(System)}"))
           .ThenBy(x => x, StringComparer.Ordinal)
           .For(x => sb.Append("global using ").Append(x).Append(";\n"))
           .Peek(_ => sb.Append("\n// Polyfills of namespaces in case dependencies are conditional.\n"))
           .For(x => sb.Append("namespace ").Append(x.StartsWith(Global) ? x[Global.Length..] : x).Append(" { }\n\n"));

        return $"{sb.Remove(sb.Length - 1, 1)}";
    }
}
