// SPDX-License-Identifier: MPL-2.0
namespace Emik.SourceGenerators.Tattoo;

/// <summary>Creates global imports of every namespace of the current project.</summary>
[Generator]
public sealed class NamespaceGenerator : ISourceGenerator
{
    [StringSyntax(StringSyntaxAttribute.Uri), UriString]
    const string File = "Emik.SourceGenerators.Tattoo.g.cs";

    /// <inheritdoc />
    [CLSCompliant(false)]
    public void Execute(GeneratorExecutionContext context) => context.AddSource(File, Imports(context.Compilation));

    /// <inheritdoc />
    [CLSCompliant(false)]
    public void Initialize(GeneratorInitializationContext context) { }

    [MustUseReturnValue]
    static string Imports(Compilation compilation)
    {
        StringBuilder sb = new("// <auto-generated/>\n");

        compilation
           .References
           .Select(compilation.GetAssemblyOrModuleSymbol)
           .Select(x => (x as IModuleSymbol)?.ContainingAssembly ?? x)
           .OfType<IAssemblySymbol>()
           .Filter()
           .Select(x => x.GlobalNamespace)
           .SelectMany(All)
           .Concat(compilation.GetSymbolsWithName(_ => true, SymbolFilter.Namespace))
           .Select(x => x.ToDisplayString(SymbolDisplayFormat.FullyQualifiedFormat))
           .Distinct(StringComparer.Ordinal)
           .Omit(string.IsNullOrWhiteSpace)
           .Where(x => x is not "<global namespace>")
           .OrderByDescending(x => x.StartsWith("System"))
           .ThenBy(x => x, StringComparer.Ordinal)
           .Select(x => x.TrimStart("global::"))
           .For(x => sb.Append("global using ").Append(x).Append(";\n"))
           .For(x => sb.Append("\nnamespace ").Append(x).Append(" { }\n"));

        return $"{sb}";
    }

    [Pure]
    static IEnumerable<INamespaceSymbol> All(INamespaceSymbol x) => x.GetNamespaceMembers().SelectMany(All).Prepend(x);
}
